/*
* File Name: Fibonacci.c
* Author: MH
* Since 2011/05/16
* Toolkit: Dev C++
*/ 	 C COMMEMT
#include 	 ID
< 	 LT
stdlib 	 ID
.h 	 ID
> 	 MT
#include 	 ID
< 	 LT
stdio 	 ID
.h 	 ID
> 	 MT
int 	 INT
fib 	 ID
( 	 LB
int 	 INT
n 	 ID
) 	 RB
{ 	 LCB
if 	 IF
( 	 LB
n 	 ID
== 	 EQ
0 	 I_CONST
) 	 RB
return 	 RET
0 	 I_CONST
; 	 SEMICOLON
if 	 IF
( 	 LB
n 	 ID
== 	 EQ
1 	 I_CONST
) 	 RB
return 	 RET
1 	 I_CONST
; 	 SEMICOLON
return 	 RET
( 	 LB
fib 	 ID
( 	 LB
n 	 ID
- 	 SUB
1 	 I_CONST
) 	 RB
+ 	 ADD
fib 	 ID
( 	 LB
n 	 ID
- 	 SUB
2 	 I_CONST
) 	 RB
) 	 RB
; 	 SEMICOLON
} 	 RCB
int 	 INT
main 	 ID
( 	 LB
) 	 RB
{ 	 LCB
int 	 INT
input 	 ID
, 	 COMMA
i 	 ID
; 	 SEMICOLON
while 	 WHILE
( 	 LB
1 	 I_CONST
) 	 RB
{ 	 LCB
printf 	 ID
( 	 LB
" 	 QUOTA
The 0th number is 0, and the first number is 1\n 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
printf 	 ID
( 	 LB
" 	 QUOTA
ex : 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 ...\n\n 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
printf 	 ID
( 	 LB
" 	 QUOTA
Please input an integer to show the last value of Fibonacci Sequence :\n 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
scanf 	 ID
( 	 LB
" 	 QUOTA
%d 	 STR_CONST
" 	 QUOTA
, 	 COMMA
&input 	 ID
) 	 RB
; 	 SEMICOLON
printf 	 ID
( 	 LB
" 	 QUOTA
\n 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
if 	 IF
( 	 LB
input 	 ID
< 	 LT
0 	 I_CONST
) 	 RB
printf 	 ID
( 	 LB
" 	 QUOTA
\nInput cannot less than 0\n\n 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
else 	 ELSE
{ 	 LCB
for 	 FOR
( 	 LB
i 	 ID
= 	 ASGN
0 	 I_CONST
; 	 SEMICOLON
i 	 ID
<= 	 LTE
input 	 ID
; 	 SEMICOLON
i 	 ID
++ 	 INC
) 	 RB
printf 	 ID
( 	 LB
" 	 QUOTA
%d  	 STR_CONST
" 	 QUOTA
, 	 COMMA
fib 	 ID
( 	 LB
i 	 ID
) 	 RB
) 	 RB
; 	 SEMICOLON
} 	 RCB
printf 	 ID
( 	 LB
" 	 QUOTA
\n\n 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
system 	 ID
( 	 LB
" 	 QUOTA
PAUSE 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
system 	 ID
( 	 LB
" 	 QUOTA
CLS 	 STR_CONST
" 	 QUOTA
) 	 RB
; 	 SEMICOLON
} 	 RCB
return 	 RET
0 	 I_CONST
; 	 SEMICOLON
} 	 RCB

Parse over, the line number is 34.

comment: 6 lines

